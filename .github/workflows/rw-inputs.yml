name: Reusable Workflow Input Examples

on: 
  workflow_call:
    inputs:
      json-key-value-pairs:
        required: true
        description: "JSON formatted key value pairs."
        type: string
      yaml-key-value-pairs:
        required: true
        description: "YAML formatted key value pairs."
        type: string

jobs:
  json-kvp:
    runs-on: ubuntu-latest
    container: 
      image: mattwiley/ubuntu:latest
      options: --user root
    steps:
      - name: Setup 
        run: |
          apt-get update
          apt-get install -yq --no-install-recommends jq
      - name: Print as JSON
        run: |
          echo ${{ toJSON(inputs.json-key-value-pairs) }} | jq

  json-via-yaml-kvp:
    runs-on: ubuntu-latest
    container:
      image: mattwiley/github_actions:python3.9-slim
      options: --user root
    outputs:
      kvps: ${{ steps.tx-to-json.outputs.kvp-as-json }}
    steps:
      - name: Setup
        run: pip install PyYaml
      - name: Print as JSON
        id: tx-to-json
        shell: python
        run: |
          import json, yaml, re 
          input = "${{ fromJSON(inputs.json-key-value-pairs) }}"
          print("::set-output name=kvp-as-json::" + json.dumps(yaml.load(input, yaml.SafeLoader)))

  yaml-kvp:
    runs-on: ubuntu-latest
    container:
      image: mattwiley/github_actions:python3.9-slim
      options: --user root
    outputs:
      user-build-args: ${{ steps.tx-to-json.outputs.user-build-args }}
    steps:
      - name: Setup
        run: pip install PyYaml
      - name: Print as JSON
        id: tx-to-json
        shell: python
        run: |
          import yaml, json

          build_args_input = "${{ inputs.custom-build-args }}"

          if build_args_input is not None:
            build_args_kvp_dict = yaml.load("${{ inputs.custom-build-args }}", yaml.SafeLoader)
            
            build_arg_output_value = "" 
            for k,v in build_args_kvp_dict.items():
              build_arg_output_value = build_arg_output_value + f"--build-arg {k}={v}"
              
            print(f"::set-output name=user-build-args::{build_arg_output_value}")
          else:
            print("No custom build args detected. Skipping prepare step.")

  consume-yaml-kvp:
    runs-on: ubuntu-latest
    needs: yaml-kvp
    env:
      USER_BUILD_ARGS: ${{ needs.yaml-kvp.outputs.user-build-args }}
    steps:
      - run: |
          echo "${{ env.USER_BUILD_ARGS }}"